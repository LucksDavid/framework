{"uid":"37a8e54527071af5","name":"test_01_login[caseinfo0]","fullName":"testcase.test_login.TestLogin#test_01_login","historyId":"e5716d1bb34ea8659886b9e8a2380e87","time":{"start":1668504274861,"stop":1668504280948,"duration":6087},"status":"broken","statusMessage":"FileNotFoundError: [Errno 2] No such file or directory: 'C:\\\\Users\\\\admin\\\\Desktop\\\\PythonUI\\\\error_image\\\\logo.png'","statusTrace":"self = <testcase.test_login.TestLogin object at 0x0000023369379C90>\ncaseinfo = [1, '输入正确的用户名和密码', 'superadmin', 452698, 'y', None]\n\n    @pytest.mark.parametrize(\"caseinfo\", read_excel(\"./data/test_login.xlsx\", \"test_01_login\", 5))\n    def test_01_login(self, caseinfo):\n        try:\n            loginpage = LoginPage(self.driver)\n>           loginpage.login_ecshop(caseinfo[2], caseinfo[3])\n\ntestcase\\test_login.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pageobject.login_page.LoginPage object at 0x00000233691F42E0>\nusername = 'superadmin', password = 452698\n\n    def login_ecshop(self, username, password):\n        # self.open_browser()\n        # username = 'mrbird'\n        # password = '123456qq'\n        self.get(self.current_url)\n>       self.send_keys(self.username_loc, username)\n\npageobject\\login_page.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pageobject.login_page.LoginPage object at 0x00000233691F42E0>\nargs = ('xpath', '//input[@placeholder=’账户‘]'), value = 'superadmin'\n\n    def send_keys(self, args, value):\n>       self.locator_element(args).send_keys(value)\n\nbase\\base_page.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pageobject.login_page.LoginPage object at 0x00000233691F42E0>\nargs = ('xpath', '//input[@placeholder=’账户‘]')\n\n    def locator_element(self, args):\n>       return self.driver.find_element(*args)\n\nbase\\base_page.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"66a0e3a5-239d-46c3-b594-4bdc6dfb7fe2\")>\nby = 'xpath', value = '//input[@placeholder=’账户‘]'\n\n    def find_element(self, by=By.ID, value=None) -> WebElement:\n        \"\"\"\n        Find an element given a By strategy and locator.\n    \n        :Usage:\n            ::\n    \n                element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if isinstance(by, RelativeBy):\n            elements = self.find_elements(by=by, value=value)\n            if not elements:\n                raise NoSuchElementException(f\"Cannot locate relative element with: {by.root}\")\n            return elements[0]\n    \n        if by == By.ID:\n            by = By.CSS_SELECTOR\n            value = '[id=\"%s\"]' % value\n        elif by == By.CLASS_NAME:\n            by = By.CSS_SELECTOR\n            value = \".%s\" % value\n        elif by == By.NAME:\n            by = By.CSS_SELECTOR\n            value = '[name=\"%s\"]' % value\n    \n>       return self.execute(Command.FIND_ELEMENT, {\n            'using': by,\n            'value': value})['value']\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:856: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"66a0e3a5-239d-46c3-b594-4bdc6dfb7fe2\")>\ndriver_command = 'findElement'\nparams = {'using': 'xpath', 'value': '//input[@placeholder=’账户‘]'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:434: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000023369379420>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid selector\",\"message\":\"Given xpath expression \\\\\"//input[@placehold...sChild.jsm:244:25\\\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.jsm:100:31\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSelectorException: Message: Given xpath expression \"//input[@placeholder=’账户‘]\" is invalid: SyntaxError: Document.evaluate: The expression is not a legal expression\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.jsm:12:1\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.jsm:192:5\nE       InvalidSelectorError@chrome://remote/content/shared/webdriver/Errors.jsm:352:5\nE       find_@chrome://remote/content/marionette/element.js:319:11\nE       element.find/</findElements<@chrome://remote/content/marionette/element.js:273:24\nE       evalFn@chrome://remote/content/marionette/sync.js:135:7\nE       PollPromise/<@chrome://remote/content/marionette/sync.js:155:5\nE       PollPromise@chrome://remote/content/marionette/sync.js:126:10\nE       element.find/<@chrome://remote/content/marionette/element.js:271:24\nE       element.find@chrome://remote/content/marionette/element.js:270:10\nE       findElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.jsm:244:25\nE       receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.jsm:100:31\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: InvalidSelectorException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcase.test_login.TestLogin object at 0x0000023369379C90>\ncaseinfo = [1, '输入正确的用户名和密码', 'superadmin', 452698, 'y', None]\n\n    @pytest.mark.parametrize(\"caseinfo\", read_excel(\"./data/test_login.xlsx\", \"test_01_login\", 5))\n    def test_01_login(self, caseinfo):\n        try:\n            loginpage = LoginPage(self.driver)\n            loginpage.login_ecshop(caseinfo[2], caseinfo[3])\n    \n        except Exception as e:\n            # 保存错误截图\n            file_name = r'C:\\Users\\admin\\Desktop\\PythonUI\\error_image\\logo.png'\n            self.driver.save_screenshot(file_name)\n            # 把错误截图以附件的形式加载到allure报告中\n>           with open(file_name, mode='rb') as f:\nE           FileNotFoundError: [Errno 2] No such file or directory: 'C:\\\\Users\\\\admin\\\\Desktop\\\\PythonUI\\\\error_image\\\\logo.png'\n\ntestcase\\test_login.py:36: FileNotFoundError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_xunit_setup_class_fixture_TestLogin","time":{"start":1668504270207,"stop":1668504274859,"duration":4652},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"_xunit_setup_method_fixture_TestLogin","time":{"start":1668504274859,"stop":1668504274859,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"afterStages":[{"name":"_xunit_setup_method_fixture_TestLogin::0","time":{"start":1668504281084,"stop":1668504281084,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"_xunit_setup_class_fixture_TestLogin::0","time":{"start":1668504281179,"stop":1668504281179,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"labels":[{"name":"parentSuite","value":"testcase"},{"name":"suite","value":"test_login"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"DESKTOP-TD3LS6V"},{"name":"thread","value":"21532-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"caseinfo","value":"[1, '输入正确的用户名和密码', 'superadmin', 452698, 'y', None]"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"37a8e54527071af5.json","parameterValues":["[1, '输入正确的用户名和密码', 'superadmin', 452698, 'y', None]"]}